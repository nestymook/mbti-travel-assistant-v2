{
  "python_client": "\n# Python Integration Example for mbti-travel-planner-agent\n\nimport requests\nimport json\n\nclass RestaurantMCPClient:\n    def __init__(self, access_token: str):\n        self.access_token = access_token\n        self.base_url = \"https://bedrock-agentcore.us-east-1.amazonaws.com\"\n        self.agent_id = \"restaurant_search_mcp\"\n        self.mcp_endpoint = f\"{self.base_url}/runtime/{self.agent_id}/mcp\"\n        self.invoke_endpoint = f\"{self.base_url}/runtime/{self.agent_id}/invocations\"\n        \n    def _get_headers(self) -> dict:\n        return {\n            'Authorization': f'Bearer {self.access_token}',\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n    \n    def list_tools(self) -> dict:\n        \"\"\"List available MCP tools.\"\"\"\n        request = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n            \"method\": \"tools/list\",\n            \"params\": {}\n        }\n        \n        response = requests.post(\n            self.mcp_endpoint,\n            headers=self._get_headers(),\n            json=request,\n            timeout=30\n        )\n        \n        return response.json()\n    \n    def search_restaurants_by_district(self, districts: list) -> dict:\n        \"\"\"Search restaurants by district using MCP tool.\"\"\"\n        request = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 2,\n            \"method\": \"tools/call\",\n            \"params\": {\n                \"name\": \"search_restaurants_by_district\",\n                \"arguments\": {\n                    \"districts\": districts\n                }\n            }\n        }\n        \n        response = requests.post(\n            self.mcp_endpoint,\n            headers=self._get_headers(),\n            json=request,\n            timeout=30\n        )\n        \n        return response.json()\n    \n    def search_restaurants_by_meal_type(self, meal_types: list) -> dict:\n        \"\"\"Search restaurants by meal type using MCP tool.\"\"\"\n        request = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 3,\n            \"method\": \"tools/call\",\n            \"params\": {\n                \"name\": \"search_restaurants_by_meal_type\",\n                \"arguments\": {\n                    \"meal_types\": meal_types\n                }\n            }\n        }\n        \n        response = requests.post(\n            self.mcp_endpoint,\n            headers=self._get_headers(),\n            json=request,\n            timeout=30\n        )\n        \n        return response.json()\n    \n    def search_restaurants_combined(self, districts: list = None, meal_types: list = None) -> dict:\n        \"\"\"Search restaurants with combined criteria using MCP tool.\"\"\"\n        arguments = {}\n        if districts:\n            arguments[\"districts\"] = districts\n        if meal_types:\n            arguments[\"meal_types\"] = meal_types\n            \n        request = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 4,\n            \"method\": \"tools/call\",\n            \"params\": {\n                \"name\": \"search_restaurants_combined\",\n                \"arguments\": arguments\n            }\n        }\n        \n        response = requests.post(\n            self.mcp_endpoint,\n            headers=self._get_headers(),\n            json=request,\n            timeout=30\n        )\n        \n        return response.json()\n    \n    def invoke_agent(self, prompt: str, session_id: str = None) -> dict:\n        \"\"\"Invoke the agent with a conversational prompt.\"\"\"\n        request = {\n            \"prompt\": prompt,\n            \"sessionId\": session_id or f\"session-{int(time.time())}\",\n            \"enableTrace\": True\n        }\n        \n        response = requests.post(\n            self.invoke_endpoint,\n            headers=self._get_headers(),\n            json=request,\n            timeout=60\n        )\n        \n        return response.json()\n\n# Usage Example:\n# client = RestaurantMCPClient(access_token=\"your_jwt_token_here\")\n# tools = client.list_tools()\n# restaurants = client.search_restaurants_by_district([\"Central district\"])\n# response = client.invoke_agent(\"Find restaurants in Central district for breakfast\")\n",
  "configuration": "\n# Configuration for mbti-travel-planner-agent\n\nRESTAURANT_MCP_CONFIG = {\n    \"agent_id\": \"restaurant_search_mcp\",\n    \"base_url\": \"https://bedrock-agentcore.us-east-1.amazonaws.com\",\n    \"mcp_endpoint\": \"https://bedrock-agentcore.us-east-1.amazonaws.com/runtime/restaurant_search_mcp/mcp\",\n    \"invoke_endpoint\": \"https://bedrock-agentcore.us-east-1.amazonaws.com/runtime/restaurant_search_mcp/invocations\",\n    \"region\": \"us-east-1\",\n    \"authentication\": {\n        \"type\": \"jwt\",\n        \"cognito_user_pool_id\": \"us-east-1_KePRX24Bn\",\n        \"cognito_client_id\": \"7kcbr8ej8ej8ej8ej8ej8ej8ej\"\n    },\n    \"tools\": [\n        \"search_restaurants_by_district\",\n        \"search_restaurants_by_meal_type\", \n        \"search_restaurants_combined\"\n    ]\n}\n",
  "endpoint_info": {
    "agent_arn": "arn:aws:bedrock-agentcore:us-east-1:209803798463:runtime/restaurant_search_mcp",
    "agent_id": "restaurant_search_mcp",
    "base_url": "https://bedrock-agentcore.us-east-1.amazonaws.com",
    "mcp_endpoint": "https://bedrock-agentcore.us-east-1.amazonaws.com/runtime/restaurant_search_mcp/mcp",
    "invoke_endpoint": "https://bedrock-agentcore.us-east-1.amazonaws.com/runtime/restaurant_search_mcp/invocations"
  },
  "test_timestamp": 1759470835.6521459
}